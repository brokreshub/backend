generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String         @id @default(cuid())
  name                 String
  email                String         @unique
  password             String
  phone                String?
  role                 String         @default("broker") // 'broker' or 'admin'
  properties           Property[]
  subscription         Subscription?
  aadharNumber         String?
  notifications        Notification[]
  passwordResetToken   String?        @unique
  passwordResetExpires DateTime?
  lastLogin            DateTime?
  status               String         @default("active") // 'active', 'suspended', 'inactive'
  loginAttempts        Int            @default(0)
  lockUntil            DateTime?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  Group                Group?         @relation("GroupMembers", fields: [groupId], references: [id])
  groupId              Int?
  Message              Message[]
  expoPushToken        String?        @unique
  activityLogs         ActivityLog[]

  @@index([groupId])
}

model Property {
  id           Int       @id @default(autoincrement())
  title        String
  imageUrls    Image[]
  description  String?   @db.Text
  location     String
  price        Float
  type         String // e.g., "Sale", "Rent", "Lease"
  area         Float?
  furnishing   String // e.g., "Unfurnished", "Fully Furnished"
  amenities    Amenity[] // Many-to-many relation
  status       String    @default("active") // 'active', 'sold', 'rented', 'inactive'
  views        Int       @default(0)
  postedBy     User      @relation(fields: [postedById], references: [id])
  postedById   String
  propertyType String // e.g., "Apartment", "House", "Commercial"
  bedrooms     Int?
  bathrooms    Int?
  parking      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([postedById])
  @@index([location])
  @@index([type])
}

model Amenity {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  properties Property[]
}

model Image {
  id         Int      @id @default(autoincrement())
  url        String
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])
  isMain     Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([propertyId])
}

model Group {
  id          Int       @id @default(autoincrement())
  name        String
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   Int
  members     User[]    @relation("GroupMembers")
  messages    Message[]

  @@index([id])
  @@index([createdBy])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  imageUrl  String?
  groupId   Int
  senderId  String
  createdAt DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])

  @@index([groupId])
  @@index([senderId])
}

model Subscription {
  id             String    @id @default(cuid())
  userId         String
  plan           String
  startDate      DateTime  @default(now())
  endDate        DateTime
  status         String    @default("active") // 'active', 'expired', 'cancelled'
  autoRenew      Boolean   @default(true)
  maxProperties  Int
  price          Float
  features       Json // Store plan features as JSON
  user           User      @relation(fields: [userId], references: [id])
  paymentHistory Payment[]

  @@unique([userId])
}

model Payment {
  id             String       @id @default(cuid())
  subscriptionId String
  amount         Float
  status         String // 'success', 'failed', 'pending'
  paymentMethod  String
  transactionId  String       @unique
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  createdAt      DateTime     @default(now())

  @@index([subscriptionId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String   @db.Text
  type      String // 'subscription', 'property', 'system'
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  userRole  String
  details   Json?
  createdAt DateTime @default(now())

  @@index([userId])
}
